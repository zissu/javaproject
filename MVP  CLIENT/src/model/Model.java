package model;
/**
*the model interface perform all the background calculations,than notify the observers. 
* @author Chen Zissu
* @version 1.0
* @since 2015-12-28
*/
import algorithms.mazeGenerators.Position;
import algorithms.search.Solution;
import presenter.Properties;

public interface Model 
{
	/**
	 * Handling the command :dir path
	 * @param path Array of strings,containing one string with path
	 */
	public void handleDirPath(String[] path);
	/**
	 * Handling the command:generate 3d maze name x, y, z algorithm
	 * name-name of the maze,x-amount of floors in maze,y-amount of rows,z-amount of columns,
	 * algorithm-prim/simple (generating algorithms)-not necessary to enter
	 * @param mazeParam Array of strings with the parameters i mentioned above
	 */
	public void handleGenerate3dMaze(String[] mazeParam);
	/**
	 * Handling the command:display name(name of the maze)
	 * @param paramArray Array with one string,the name of the maze that needs to be displayed
	 */
	public void handleDisplayName(String[] paramArray);
	/**
	 * Handling the errors of typing commands
	 * @param paramArr parameters' array with the name of the error
	 */
	public void handleError(String[] paramArr);
	/**
	 * closing the running threads
	 * @param emptyArr there is nothing there
	 */
	public void handleExit(String[] emptyArr);
	/**
	 * Handling the command:display cross section by (x,y,z) index for name
	 * @param paramArray Array of strings containing the parameters above
	 */
	public void handleDisplayCrossSectionBy(String[] paramArray);
	
	
	/**
	 * Handling the command:save maze name file name
	 * name-maze name generated before,file name-the name of the file to save maze to
	 * @param paramArray array of strings with the parameters above
	 */
	public void handleSaveMaze(String[] paramArray);
	/**
	 * handling command:load maze file name name
	 * loading maze to the file specified
	 * @param paramArray array of strings with file name and maze name
	 */
	public void handleLoadMaze(String[] paramArray);
	/**
	 * handling command:maze size name
	 * measure the size of maze in memory
	 * @param paramArray array of one string with the name of the file
	 */
	public void handleMazeSize(String[] paramArray);
	/**
	 * handling command:file size name
	 * measure the size of maze in a file
	 * @param paramArray array with one string that contain the maze name,than i will find the file of this maze,
	 * and check the size of the maze in this file
	 */
	public void handleFileSize(String[] paramArray);
	/**
	 * handle command:solve name algorithm
	 * solves the maze specified,with specified algorithm
	 * @param paramArray array of 2 strings:cell 0-name of the maze,1-the algorithm that meant to find the solution of the maze
	 */
	public void handleSolveMaze(String[] paramArray);
	/**
	 * handle command:display solution name
	 * display an existing solution
	 * @param paramArray array of one string with the name of the maze
	 */
	public void handleDisplaySolution(String[] paramArray);
	/**
	 * handling a command that asks for a solution from the middle of the maze,not from the beginning
	 * command:solve from name algorithm x, y, z
	 * solve maze name from cell x,y,z with the algorithm specified.
	 * algorithm not have to be specified.
	 * @param paramArray parameters' array with all the parameters(name,algorithm and point to start solving the maze)
	 */
	public void handleSolveFrom(String[] paramArray);
	/**
	 * after the solution is ready from the command above,we ask to get the solution
	 * @param paramArray the name of the maze(that the half solution was generated for it)
	 */
	public void handleDisplayHalfSolution(String[] paramArray);
	/**
	 * handling command: load xml
	 * loading a xml file with the properties of the maze,
	 * if there is no such file,create one and load it into object of properties
	 * @param path path of the xml file
	 */
	public void handleLoadXML(String[] path);
	
	/**
	 * return the cross section generated by commands:display cross section
	 * @return 2d array with the cross section specified
	 */
	public int[][] getCrossSection();
	/**
	 * return the pharse:maze has been loaded
	 * @return string with the pharse:maze has been loaded
	 */
	public String getSaveMazeCode();
	/**
	 * return an object of properties,with the data about every thing in the maze
	 * @return return properties object,containing data about:
	 * number of threads wanted,algorithm to generate the maze,algorithm to solve the maze,type of user interface
	 */
	public Properties getProperties();
	/**
	 * return a partial solution for specified maze
	 * @param name the name of the maze we want its solution
	 * @return solution
	 */
	public Solution<Position> getSpecificHalfSolution(String name);
	/**
	 * return string with pharse:half solution is ready
	 * @return string with pharse:half solution is ready
	 */
	public String getSolveHalfMazeCode();
	/**
	 * return string with the error code
	 * @return string with the error code
	 */
	public String getErrorCode();
	/**
	 * returning a array of strings with the names of files and directories
	 * @return array of strings with the names of files and directories
	 */
	public String[] getDirList();
	/**
	 * return a string:the maze is ready
	 * @return string with the pharse:maze is ready
	 */
	public String getGenerate3dmazeCode();
	/**
	 * return the maze specified from collection
	 * @param name the name of the maze
	 * @return return byte array representing the maze
	 */
	public byte[] getSpecificMazeFromColllection(String name);
	/**
	 * return string with the code:maze has been loaded
	 * @return string with the code:maze has been loaded
	 */
	public String getLoadMazeCode();
	/**
	 * return the size of the maze in the memory
	 * @return size of the maze in the memory
	 */
	public int getMazeSize();
	/**
	 * return the size of the maze in file
	 * @return the size of the maze in the file
	 */
	public long getFileSize() ;
	/**
	 * return string:maze solution is ready
	 * @return string:maze solution is ready
	 */
	public String getSolveMazeCode() ;
	/**
	 * returning a solution for the specified maze
	 * @param name name of the maze 
	 * @return the solution of the maze
	 */
	public Solution<Position> getSpecificSolution(String name);
	
}
